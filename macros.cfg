#####################################################################
#   Macros
#####################################################################


[gcode_macro PRINT_START]
gcode:
     # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  #BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  #  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  G28 Z                                    # Homes Z again after z_tilt_adjust

  ##  Uncomment for bed mesh (2 of 2)
  #SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  #STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  #bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  G1 X100 E20 F1000                                # Purge line
  G90                                              # Absolut position

[gcode_macro PRINT_END]
gcode:
    M117 Print complete

    #  Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #  Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    #G1 E-10.0 F3600                  ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} F3600               ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    G90                              ; absolute positioning
    #G0 X{max_x / 2} Y{max_y} F3600   ; park nozzle at rear
    G0 X150 Y280 F6000               ; park nozzle at rear
    FORM_TIP
    #DISABLE_SFS
    RESET_LEDS


[gcode_macro PRINT_CONTINUE]
gcode:
    {% set BED = params.BED|default(110)|int %}
    {% set HOTEND = params.HOTEND|default(250)|int %}

    M117 Heating bed...
    #{% if BED < 110 %}
    #{% else %}
    #{% endif %}
    M190 S{BED}                       ; set final bed temperature and wait for it to be reached
    #{% if BED < 110 %}
    #{% else %}
    #{% endif %}
    M117 Pre-heating hotend...
    #M104 S{HOTEND*0.60}               ; start preheating hotend to non-ooze temperature prior to homing and mesh
    M104 S{150}                       ; start preheating hotend to Tap temperature
    SET_LED_EFFECT EFFECT=logo_default STOP=1
    SET_LED_EFFECT EFFECT=logo_idle STOP=1
    {% if HOTEND < 230 %}             ;  set SB color to heating ABS/PLA
        SET_LED_EFFECT EFFECT=logo_pla
        SET_LED_EFFECT EFFECT=logo_pla_heating
    {% else %}
        SET_LED_EFFECT EFFECT=logo_abs
        SET_LED_EFFECT EFFECT=logo_abs_heating
    {% endif %}

    #BED_MESH_PROFILE LOAD=default
    SET_LED_EFFECT EFFECT=nozzles_on

    #Purge Line Gcode
    G92 E0
    
    #G0 X5 Y5 F6000                  ; for purge line
    
    G90                     
    G1 X{230} Y{301} F6000           ; move nozzle to start position 
    G1 Z{6} F1500
    
    M117 Heating hotend...
    M109 S{HOTEND}                   ; set final hotend temperature and wait for it to be reached
    {% if HOTEND < 230 %}            ; stop SB heating effect
        SET_LED_EFFECT EFFECT=logo_pla_heating STOP=1
    {% else %}
        SET_LED_EFFECT EFFECT=logo_abs_heating STOP=1
    {% endif %}
    M117 Purging...
    #CLEAN_NOZZLE kivettem
    ENABLE_SFS
    #PURGE
    #ADAPTIVE_PURGE
    M117 #Printing...

#[gcode_macro CLEAN_NOZZLE] kivettem
#variable_start_x: 230
#variable_start_y: 301
#variable_start_z: 2
#variable_wipe_dist: -50
#variable_wipe_qty: 4
#variable_wipe_spd: 400
#variable_raise_distance: 6

gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
     G28
    {% endif %}
    
    G90                                            ; absolute positioning
    ## Move nozzle to start position
    G1 X{start_x} Y{start_y} F6000
    G1 Z{start_z} F1500

    G1 E15 F1200  # Purge to prime nozzle
    G1 E-0.4 F1200  # Retract
    G4 P12000      # Dwell to wait for ooze
    
    ## Wipe nozzle
    {% for wipes in range(1, (wipe_qty + 1)) %}
     G1 X{start_x + wipe_dist} F{wipe_spd * 60}
     G1 X{start_x} F{wipe_spd * 60}
    {% endfor %}
    
    ## Raise nozzle
    G1 Z{raise_distance}
    G1 F9000 # Starting speed hack to prevent cool filament tip


[gcode_macro PURGE]
description: Normal bed-front purge line
gcode:
    M117 Purging...
    G0 Z0.4
    G91
    G1 X100 E25 F1200
    G1 Z6 F3000                       ; move platform down 6mm
    G92 E0
    G90
    G92 E0                            ; zero the extruded length again
    G1 F9000


[gcode_macro FORM_TIP]
description: Helper: Round the filament tip
gcode:
  G92 E0   ; zero the extruder
  M83      ; relative extrusion
  G1 E2 F100
  G1 E-2
  G1 E4
  G1 E-10
  #G1 E-25


[gcode_macro CENTER]
gcode:
    G90                        ; absolute positioning
    G0 Z15 F3600               ; move bed down
    G0 X150 Y150 F6000


[gcode_macro FRONT]
gcode:
    G90                        ; absolute positioning
    G0 Z15 F3600               ; move bed down
    G0 X150 Y40 F6000


[gcode_macro REAR]
gcode:
    G90                        ; absolute positioning
    G0 Z15 F3600               ; move bed down
    G0 X150 Y290 F6000


[gcode_macro BELT]
description: A macro that assists with repeatable belt tensioning.
variable_y_tensioning_position: 115       #Position the printhead needs to be to have 150mm of belt length exposed for belt tensioning.
gcode:
    {% set x_max = printer.configfile.settings.stepper_x.position_max %}
    {% set travel_speed = printer.configfile.settings.printer.max_velocity %}

    G90                        ; absolute positioning
    G0 X{x_max/2} Y{y_tensioning_position} F{travel_speed*60}
    { action_respond_info( "Tension A/B belts to 110hz @ X: {}, Y: {}".format(x_max/2, y_tensioning_position) ) }


[gcode_macro GIT_BACKUP]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg

[gcode_macro COOLDOWN]
gcode:
    M117
    {action_respond_info("Cooling down")}
    TURN_OFF_HEATERS 
   
[gcode_macro HEATSOAK_ABS]
gcode:
    M117 Heatsoaking ABS...
    {action_respond_info("Heating bed to 110")}
    M140 S110
    
[gcode_macro MOTORS_OFF]
gcode:
    M18

[gcode_macro LOAD]
gcode:
    M104 S150                        ; set TAP-safe temp and continue
    {% if "xyz" not in printer.toolhead.homed_axes %}
      M117 Homing...
      G28
    {% endif %}
    G90                              ; absolute positioning
    G0 X210 Y302 F6000
    M117 Heating hotend...
    M109 S230                        ; set and wait for ABS-extrudable temp
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83                              ; set extruder to relative
    M117 Purging...
    G1 E23 F600                      ; extrude 23mm to clear previous filament
    #G1 E-10.0 F3600                 ; retract
    CLEAN_NOZZLE                     ; will extrude an additional 12mm in preparation for printing, total of 35mm purged
    G1 E-7 F3600                     ; CLEAN_NOZZLE only retracts 3mm in preparation for printing, retract an additional 7mm to get to the full 10mm
    M104 S0                          ; turn off hotend
    M117
    RESTORE_GCODE_STATE NAME=LOADFILAMENT


[gcode_macro CLEAN]
gcode:
    M117 Pre-heating hotend...
    M104 S150                        ; set TAP-safe temp and continue
    {% if "xyz" not in printer.toolhead.homed_axes %}
      M117 Homing...
      G28
    {% endif %}
    FRONT                            ; move to front of bed
    M117 Heating hotend...
    M109 S250                        ; set and wait for cleaning temp
    SAVE_GCODE_STATE NAME=CLEANFILAMENT
    M117 Cleaning...
    M83                              ; set extruder to relative
    G1 E25 F50                       ; extrude 25mm to clear most of previous filament
    G1 E-5.0 F200                    ; retract
    G1 E15.0 F3000                   ; extrude 15
    G1 E-5.0 F200                    ; retract
    G1 E15.0 F3000                   ; extrude 15
    G1 E-5.0 F200                    ; retract
    G1 E10.0 F3000                   ; extrude 10 to make sure filament fills the nozzle
    M104 S90                         ; set hotend to cold-pull temp
    M117 Ready for cold pull
    RESTORE_GCODE_STATE NAME=CLEANFILAMENT

#####################################################################
#   Misc
#####################################################################


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro M600]
gcode:
    #{% set X = params.X|default(50)|float %}
    #{% set Y = params.Y|default(0)|float %}
    #{% set Z = params.Z|default(10)|float %}
    #SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    #G91
    #G1 E-.8 F2700
    #G1 Z{Z}
    #G90
    #G1 X{X} Y{Y} F3000
    #G91
    #G1 E-10 F3600
    #RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}


[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}



[gcode_macro TEST_SPEED]
gcode:
	#  Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	#  Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	#  Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	#  Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	#  Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	#  Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	#  Absolute positioning
	G90
	
	#  Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	#  Home and get position for comparison later:
		G28
		#  QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	#  Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		#  Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		#  Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	#  Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	#  Re-home XY and get position again for comparison:
		G28 X Y
		#  Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	#  Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED


#  Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
#  For use with Marlin's linear advance calibration: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	#  Parameters
	{% set pa = params.K|float %}
	SET_PRESSURE_ADVANCE ADVANCE={pa}


#  For testing TAP

[gcode_macro TEST_PROBE_ACCURACY_150]
gcode:
	TEST_PROBE_ACCURACY EXTRUDER_TEMP=150

[gcode_macro PROBE_ACCURACY_10]
gcode:
	PROBE_ACCURACY SAMPLES=10

[gcode_macro PROBE_ACCURACY_25]
gcode:
	PROBE_ACCURACY SAMPLES=25

[gcode_macro PROBE_ACCURACY_50]
gcode:
	PROBE_ACCURACY SAMPLES=50

# Gadget Angle's GCode Search Macro

[gcode_macro SEARCH_GCODE_ROUTINES]
# This Macro lists all your user defined g-code macros that use a command that you specify in NAME=
#
# use : SEARCH_GCODE_ROUTINES NAME=m190
#
# if you want a list all your user_define G-Code macros just run the command without arguments: SEARCH_GCODE_ROUTINES
#
# URL: https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/main/articles/useful_macros.md#dump-variables

#printer['configfile'].config = {'gcode_macro CURRENT_NORMAL': {'gcode': '\n_general_Debug msg="CURRENT_NORMAL - entering"}}
gcode:
    {% set filter_name = params.NAME|default(' ')|string|lower %}
    
    {% set out = [] %}
    {% set ns = namespace(num=0, delayed_num=0) %}
    {% set string3 = "gcode_macro " %}
    {% set string3_2 = "delayed_gcode" %}
    {% set string4 = "gcode" %}
    {% set gcodetxt1 = "G-CODE_________name" %}
    {% set gcodetxt2 = "DELAYED_G-CODE_name" %}
    
    {% for key1 in printer %}
        {% for key2 in printer[key1] %}            
            {% if ( (key1|lower == 'configfile') and (key2|lower in ['config']) ) %}
                    {% if printer[key1][key2].items() %}
                        {% for key3, value3 in printer[key1][key2].items() %}
                            #comment : key3 = gcode_macro print_end; value3 = {'gcode': '\n_general_debug msg="
                            {% if string3 in key3 or string3_2 in key3%}
                                    {% for key4, value4 in value3.items() %}
                                         # comment : key4 = gcode; value4={% set message = params.msg %}
                                        {% if ((string4 in key4) and ((filter_name|lower) in (value4|lower))) %}
                                              {% if string3 in key3 %}
                                                  {% set ns.num = ns.num + 1 %}
                                                  {% set dummy4 = out.append('%19s[%d]: %s' % ( (gcodetxt1.rjust(19," ")), ns.num, key3[12:]|upper) ) %}
                                              {% elif string3_2 in key3 %}
                                                  {% set ns.delayed_num = ns.delayed_num + 1 %}
                                                  {% set dummy4 = out.append("%19s[%d]: %s" % ( gcodetxt2, ns.delayed_num, key3[14:]|upper) ) %}
                                              {% endif %}
                                        {% else %}
                                        {% endif %} 
                                    {% endfor %}
                            {% endif %}
                        {% endfor %}
                    {% endif %}
           {% endif %}
        {% endfor %}
    {% endfor %}  
    {action_respond_info("Found a TOTAL of %d occurrances for %s command in USER MACROS." % ((ns.num + ns.delayed_num), filter_name|upper)) }
    {action_respond_info("Found %d occurrances in G-Code macros & Found %d occurrances in DELAYED G-Code macros." % (ns.num, ns.delayed_num)) }
    {action_respond_info("The following list of G-Code macros contains the command:")}
    {action_respond_info(out|join("\n"))}